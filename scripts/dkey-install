#!/bin/bash

usage="Usage: dkey-install [-k] [-f] [-n] DOMAIN [ID]"
help='
Install a DKIM key. If ID is not specified, defaults to current YYYYMM.

  -k, --keyonly     Only update key table, but not signing table.
  -f, --force       Skip key verification.
  -n, --norestart   Do not restart opendkim after install.
'

dir_="$(dirname "$0")"
source "$dir_/helpers/common.sh"

set -e
shopt -s expand_aliases

alias dkey-test="$dir_/dkey-test"

log_err() {
  echo "${cRed}Error$cReset $@" >&2
}

fail() {
  log_err "$@"
  exit 1
}

soft_fail() {
  echo "$@" >&2
  exit 1
}

log_info() {
  echo "$cMagentaLight$uCaret$cReset $@"
}

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -h|--help) printf '%s\n%s' "$usage" "$help"; exit 0;;
    -f|--force) force=1;;
    -n|--norestart) norestart=1;;
    -k|--keyonly) keyonly=1;;
    -*) fail "Unknown option: $1";;
    *) true;
      if [[ -z "$domain" ]]; then
        domain="$1"
      elif [[ -z "$id" ]]; then
        id="$1"
      else
        log_err "Too many arguments"
        soft_fail "$usage"
      fi;;
  esac
  shift
done

[[ -n "$id" ]] || id=$(date +"%Y%m")

[[ -n "$DKIM_KEYS_DIR" ]] || fail "DKIM_KEYS_DIR not set"

resc() {
  sed -E 's~([.\*])~\\\1~g' <<<"$1"
}

format-entry() {
  local key=$1
  local value=$2
  local file=$3
  local keywidth="$(grep -E '^[^#\s].' "$file" | awk '{print $1}' | wc -L)"
  [[ "${#key}" -lt "$keywidth" ]] || keywidth="${#key}"
  printf "%-${keywidth}s    %s" "$key" "$value"
}

get-entry() {
  local keyesc="$(resc "$1")"
  local file="$2"
  grep -E "^$keyesc\s" "$file"
}

has-entrykey() {
  get-entry $@ > /dev/null
}

has-entry() {
  local keyesc="$(resc "$1")"
  local valesc="$(resc "$2")"
  local file="$3"
  grep -qE "^$keyesc\s+$valesc\$" "$file"
}

replace-entry() {
  local keyesc="$(resc "$1")"
  local entry="$2"
  local file="$3"
  sed -i -E "s~^$keyesc\s.*~$entry~" "$file"
}

log_info "Installing key $id for domain $domain"

[[ -n "$force" ]] || dkey-test "$domain" "$id"

keyname="${id}_${domain}"
keyfile="$DKIM_KEYS_DIR/$id.$domain.private"
keytable="$(opendkim -e KeyTable)"
signtable="$(opendkim -e SigningTable | sed 's~^refile:~~')"

for file in "$keyfile" "$keytable" "$signtable"; do
  [[ -e "$file" ]] || fail "$file not found"
done

do-update-table() {
  local key="$1"
  local value="$2"
  local file="$3"
  local desc="$4"
  local entry="$(format-entry "$key" "$value" "$file")"
  if has-entrykey "$key" "$file"; then
    if has-entry "$key" "$value" "$file"; then
      log_info "$desc: entry already present"
    else
      log_info "$desc: updating existing entry"
      replace-entry "$key" "$entry" "$file"
      ischange=1
    fi
  else
    log_info "$desc: adding new entry"
    echo "$entry" >> "$file"
    ischange=1
  fi
}

update-keytable() {
  local key="$keyname"
  local value="$domain:$id:$keyfile"
  local file="$keytable"
  do-update-table "$key" "$value" "$file" "Key table"
}

update-signtable() {
  local key="*@$domain"
  local value="$keyname"
  local file="$signtable"
  do-update-table "$key" "$value" "$file" "Signing table"
}

update-keytable

[[ -n "$keyonly" ]] || update-signtable

if [[ -n "$ischange" ]]; then
  if [[ -z "$norestart" ]]; then
    log_info "Restarting opendkim"
    service_restart opendkim
  else
    log_info "Restart opendkim to activate changes"
  fi
else
  log_info "No changes made"
fi
