#!/usr/bin/env python3
from __future__ import annotations

import subprocess
from pathlib import Path

import settings
from common import Clrs, md5file, meta, postconf


class Pmap(object):

    def __init__(self, srcfile: Path, *flags: str):
        self.srcfile = srcfile
        self.flags = flags
        self.db = Path(f'{self.srcfile.resolve()}.db')
        self.hashfile = self.srcfile.parent/f'.{self.db.name}.phash'
        self.stored = None
        self.observed = None

    def read(self):
        if self.hashfile.exists():
            self.stored = self.hashfile.read_text()
        if self.srcfile.exists() and self.db.exists():
            self.observed = modhash(self.srcfile, self.db)

    @property
    def matches(self):
        return bool(self.stored) and self.stored == self.observed

    def update(self):
        cmd = [settings.POSTMAP_BIN, *self.flags, self.srcfile]
        subprocess.run(cmd, check=True)
        self.read()
        self.hashfile.write_text(self.observed)

def modstat(file: Path) -> tuple[int, float, str]:
    stat = file.stat()
    return (stat.st_size, stat.st_mtime, md5file(file))

def modhash(*files: Path) -> str:
    return str(tuple(map(modstat, files)))

def main():
    confdir = Path(postconf('-h', 'config_directory'))
    pfx = f'[{Clrs.cyanLight("postmap")}]'
    for filename, *flags in map(str.split, meta.pmapfiles):
        pmap = Pmap(confdir/filename, *flags)
        pmap.read()
        if settings.FORCE_MAPS or not pmap.matches:
            print(pfx, Clrs.yellow(filename))
            pmap.update()

if  __name__ == '__main__':
    main()
