#!/bin/bash

default_delay="5"
bn_="$(basename "$0")"
usage="Usage: $bn_ [OPTIONS] [IP ...]"
help="
Check if spamrats considers the whole class C suspect

Examples:

    $bn_ 86.190.150.195 222.240.148.170

Options:
   -d, --delay INT[s|m|h]   How long to delay before each query.
                            Optionally specify s, m, or h for unit.
                            Default is ${default_delay}.
   -f, --fail               Exit with code 1 if no matches.
   -i, --stdin              Read IP address from stdin.
   -m, --match              Only print matching class C entries.
   -r, --reject             Output formatted reject line for postfix.
   -q, --quiet              Do not log IP address warnings.
   -h, --help               Print this help and exit.

Notes:
  - The delay is always performed before the query, in case this
    is called multiple times from a script.
  - Invalid or private IP addresses are skipped with a warning"

set -e
shopt -s expand_aliases

dir_="$(abs `dirname "$0"`)"
source "$dir_/helpers/common.sh"

if is_color ; then
  alias clr="$dir_/clr"
else
  alias clr=cat
fi

alias ipgrep="$dir_/ipgrep"

url="https://www.spamrats.com/lookup.php"

log_err() {
    echo "${cRed}Error$cReset $@" >&2
}

log_warn() {
    echo "${cYellowLight}Warning${cReset} $@" >&2
}

fail() {
    log_err "$@"
    cleanup
    exit 1
}

soft_fail() {
    echo "$@" >&2
    cleanup
    exit 1
}

log_info() {
    echo "$@" | clr
}

cleanup() {
    if [[ ! -z "$tmp" ]] && [[ -d "$tmp" ]]; then
        rm -r "$tmp"
    fi
}

[[ "$#" -gt 0 ]] || soft_fail "$usage"

tmp="$(mktemp -d)"
debug "Temp dir: $tmp"

fips="$tmp/ips"
match_fmt='%s'

alias o_stdin=false
alias o_quiet=false
alias o_match=false
alias o_fail=false

while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -h|--help) printf '%s\n%s' "$usage" "$help" >&2 ; exit 0;;
        -d|--delay) true;
            if grep -qE '^[0-9]+[smh]?$' <<< "$2"; then
                delay="$2"
            else
                fail "Invalid value for ${1}: ${2}"
            fi
            shift;;
        -f|--fail) alias o_fail=true;;
        -i|--stdin) alias o_stdin=true;;
        -m|--match) alias o_match=true;;
        -r|--reject) match_fmt='%-19s%s reject';;
        -q|--quiet) alias o_quiet=true;;
        -*) fail "Unknown option: $1";;
        *) true;
            if o_stdin; then
                log_err "Cannot pass IP arguments with --stdin"
                soft_fail "$usage"
            else
                echo "$1" >> "$fips"
            fi;;
    esac
    shift
done

# No IPs passed
if ! o_stdin && [[ ! -e "$fips" ]]; then
    log_err "No IPs passed"
    soft_fail "$usage"
fi

[[ -n "$delay" ]] || delay="$default_delay"

cnt_lookups=0
cnt_match_classc=0

is_valid_ip() {
    grep -q -E '^([0-9]{1,3}\.){3}[0-9]{1,3}$' <<< "$1"
}

is_private_ip() {
    grep -q -E \
        -e '^127\.' \
        -e '^10\.' \
        -e '^192\.168\.' \
        -e '^172\.1[6-9]\.' \
        -e '^172\.2[0-9]\.' \
        -e '^172\.3[0-1]\.' \
    <<< "$1"
}

do_lookups() {

    local ip fdown="$tmp/download"

    fetch_result() {
        debug "Fetching result for $ip"
        curl -sGLo "$fdown" --data-urlencode "ip=$ip" "$url"
        cnt_lookups="$(expr "$cnt_lookups" + 1)"
    }

    check_classc() {
        if grep -qiF 'worst offender alert' "$fdown" ; then
            cnt_match_classc="$(expr "$cnt_match_classc" + 1)"
            return 0
        fi
        return 1
    }

    log_result() {
        local s_ip s_res s_cidr s_result
        if check_classc; then
            s_cidr="$(sed -E 's~.[0-9]+$~.0/24~' <<< "$ip")"
            log_info "$(printf "$match_fmt" "$s_cidr")"
            return 0
        fi
        if o_match; then
            # skip non-match if match only
            return 0
        fi
        log_info "NotFound: $ip"
    }

    while read ip ; do
        debug "Checking ip $ip"
        if ! is_valid_ip "$ip" ; then
            o_quiet || log_warn "Skipping invalid IP: $ip"
        elif is_private_ip "$ip" ; then
            o_quiet || log_warn "Skipping private IP: $ip"
        else
            debug "Sleeping for $delay"
            sleep "$delay"
            fetch_result
            log_result
        fi
    done
}

if o_stdin ; then
    do_lookups <&0
else
    do_lookups < "$fips"
fi

if [[ "$cnt_lookups" = 0 ]]; then
    o_quiet || log_warn "No lookups performed"
fi

cleanup

if [[ "$cnt_match_classc" = 0 ]] && o_fail ; then
    exit 1
fi
